@page "/documentos/imageupload"
@using UPLOAD.SHARE.DTOS
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject IRepository repository

<div class="card">
    <div class="card-header">
        <span>
            <i class="oi oi-data-transfer-upload" />Carga Documentos
            <div class="upload-section">
                <h3 class="upload-heading">Selecciona tus imágenes</h3>
                <div class="file-input-container">
                    <InputFile OnChange="LoadFiles" multiple />
                 @*    <span class="file-input-label">Haz clic aquí para seleccionar archivos</span> *@
                </div>
            </div>
        </span>
    </div>
</div>






@if (uploading)
{
    <div class="spinner" />
}

@if (!string.IsNullOrEmpty(uploadMessage))
{
    <p>@uploadMessage</p>
}
@if (loadedImages != null && loadedImages.Any())
{
    <h3>Imágenes Cargadas</h3>
    <table class="image-table">
        <tr>
            @foreach (var image in loadedImages)
            {
                <td>
                    <img src="@image.Name" alt="Imagen a Subir" />
                </td>
            }
        </tr>
    </table>
}
@code {
    private bool uploading = false;
    private string uploadMessage = "";
    private string? imageName;
    private string? base64Image;
    private List<ImagenDTO> loadedImages = new List<ImagenDTO>();

    [Inject]
    private HttpClient httpClient { get; set; }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        uploading = true;

        try
        {
            var files = e.GetMultipleFiles();
            foreach (var file in files)
            {
                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream(maxAllowedSize: 5* 1024 * 1024).CopyToAsync(memoryStream);
                    byte[] imageData = memoryStream.ToArray();

                    imageName = file.Name;
                    base64Image = Convert.ToBase64String(imageData);

                    // Llamar al método de la API para cargar la imagen
                    await UploadImage(imageName, base64Image);
                }
            }
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error al cargar la imagen: {ex.Message}";
        }

        uploading = false;
    }

    private async Task UploadImage(string imageName, string base64Image)
    {
        try
        {
            var imagenDTO = new ImagenDTO(imageName, base64Image);

            // Llamar a la API para cargar la imagen utilizando HttpClient
            var response = await repository.PostAsync<ImagenDTO>("api/imagenes", imagenDTO);
            if (response.Error)
            {
                var message = await response.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message);
                return;
            }

            loadedImages.Add(imagenDTO);
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error al cargar la imagen: {ex.Message}";
        }
    }


    private void Return()
    {
        navigationManager.NavigateTo("/documentos");
    }



}